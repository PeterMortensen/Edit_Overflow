

//Special:  
//  NOT_IN_CODE     Not actually in the source code. For example, because 
//                  a change was made to the designer (and thus in 
//                  the autogenerated part).
 

//Markers:
//  HHHH  End of change messages.
//  BBBB  Traces


//PM_REFACTOR 2010-02-24

//PM_REFACTOR 2010-05-01

//PM_BEGGING_OPTIONS 2010-05-16

//PM_GUI_HINTS 2010-09-04

//PM_REMEMBER_TIMING 2010-09-13

//PM_URLOPEN_AMBERSAND_BROKEN 2011-02-17

//PM_SPELLING_OVER_WIKIPEDIA 2011-04-05

//PM_SPELLING_OVER_WIKIPEDIA 2011-04-05

//PM_NOT_IN_CODE__RETURNKEY_FOR_LOOKUP 2011-05-11   //

//PM_CSHARP_BROKEN 2011-07-18

//PM_REFACTOR 2011-08-12

//PM_REFACTOR 2011-11-02

//PM_REFACTOR 2012-01-30

//PM_AUTOMATIC_MARKDOWN_LINK_IDS 2012-01-30

//PM_HTML_KEYBOARD_UTILITY 2012-01-30

//PM_REFACTOR 2012-02-16





Marker: HHHHHHHHHHHHHHHH


==================================================================

To formal code standard:

  1. m as prefix for instance variables

  2. capital letters for constants

  3. a before parameter values

  4. ("value" always for properties)?

  5. Standard file header

  6. Don't rely on default values of variables, always use explicit
     initialisation at declaration. This will ease translation
     to other languages.

  7. Group public and private members, e.g. all public
     functions and subs first in a source file.

  8. enum as postfix for enum types. e as prefix for enumerators.

  9. End a structure name with "Structure". E.g.: peptideFilterStructure
  
 10. 
  

==================================================================================

Source code templates:


//Sections in this template:
//  1. VB (Visual Basic)
//  2. Perl

//Future (for this template file only):
//  1. Template for DOS Batch files (there are already some in COLANOTE.CPP)
//  2. VB part: Add New() to class


'==============================================================================


//C# part, begin

Normal source file:


/****************************************************************************
 * Copyright (C) 2008 Peter Mortensen and Matthias Mann                     *
 * This file is part of MSQuant.                                            *
 *                                                                          *
 * MSQuant is distributed under the terms of                                *
 * the GNU General Public License. See src/COPYING.TXT or                   *
 * <http://www.gnu.org/licenses/gpl.txt> for details.                       *
 *                                                                          *
 * MSQuant is free software; you can redistribute it                        *
 * and/or modify it under the terms of the GNU                              *
 * General Public License as published by the Free                          *
 * Software Foundation; either version 2 of the                             *
 * License, or (at your option) any later version.                          *
 *                                                                          *
 * MSQuant is distributed in the hope that it will be                       *
 * useful, but WITHOUT ANY WARRANTY; without even the                       *
 * implied warranty of MERCHANTABILITY or FITNESS FOR                       *
 * A PARTICULAR PURPOSE.  See the GNU General Public                        *
 * License for more details.                                                *
 *                                                                          *
 * You should have received a copy of the GNU General                       *
 * Public License along with MSQuant; if not, write to                      *
 * the Free Software Foundation, Inc., 59 Temple                            *
 * Place, Suite 330, Boston, MA  02111-1307  USA                            *
 *                                                                          *
 * Purpose: Calculates isotope distributions for peptides and others,       *
 *          according to the algorithm given in:.                           *
 *                                                                          *
 ****************************************************************************/

/****************************************************************************
 *                               CEBI                                       *
 *                    Software Development Group                            *
 *                         Peter Mortensen                                  *
 *                E-mail: NUKESPAMMERSdrmortensen@get2netZZZZZZ.dk          *
 *                 WWW: http://www.cebi.sdu.dk/                             *
 *                                                                          *
 *  Program for post-processing of result from search in mass               *
 *    spectrometric data.                                                   *
 *                                                                          *
 *    FILENAME:   isotopeDistribution.cs                                    *
 *    TYPE:       CSHARP                                                    *
 *                                                                          *
 * CREATED: PM 2008-01-24   Vrs 1.0.                                        *
 * UPDATED: PM 2008-xx-xx                                                   *
 *                                                                          *
 *                                                                          *
 ****************************************************************************/

'using System.xyz;


/****************************************************************************
 *    <placeholder for header>                                              *
 ****************************************************************************/
namespace xyz
{

    /****************************************************************************
     *    <placeholder for header>                                              *
     ****************************************************************************/
    public class xyz2


<more to fill in here>



    } //class xyz2

} //namespace xyz


Templates:

    try
    {
        //Do stuff.
    }
    catch (Exception exceptionObject) //using ;
    {
        utilityStatic.displayStandardExceptionInfo( _
          exceptionObject, _
          "Could not open file " & aMascotWiffFileAss.MascotFileStr)
        //System.Windows.Forms.MessageBox.Show(msg);
    }
    finally
    {
		//Clean up.
    }


    For (for the "foreach" sample, see below):

      int len = mSequence.Length();
      for (int i = 0; i < len; i++)
      {
          if (i == 5) 
          {
              break;
          }
      } //for

    Case statement:

      int anIndex;
      double result;
      switch (anIndex) 
      {
          case 0:
              result = 1.2;
              break;
          case 1:
              result = 1.7;
              break;
          default:
              Trace.Assert(false, "PIL ASSERT. Select Case never fall-through");
              break;
      } //switch


    Type safe collections (of double in this example):

      Iterating:
        Generic.List<double> checkBoxInfoList ...
        foreach ( double someItem in checkBoxInfoList)
        {
            double yDiff = someItem;
            if (yDiff > 5.1) 
            {
              break;
            }
        } //Through checkBoxInfoList

      Building:
        int testVectorSize = 7;
        double someNewItem = 12.09;
        Generic.List<double> checkBoxInfoList2 = new Generic.List<double>();
        int lastIndex = testVectorSize - 1;
        int j;
        for (j = 0; j <= lastIndex; j += 1)
        {
            checkBoxInfoList2.Add(someNewItem);
        } //for


    Hash iteration, type safe:

      string keyWithMass = "xyz_2";
      double oldValue;
      double someBestScore = 23.81;
      
      Dictionary<string, double> bestScoreHash2 = new Dictionary<string, double>();
      if (bestScoreHash2.TryGetValue(keyWithMass, oldValue)) 
      {
          bestScoreHash2(keyWithMass) = someBestScore;
      }
      else 
      {
          bestScoreHash2.Add(keyWithMass, someBestScore);
      }
      
      Dictionary<string, double>.Enumerator hashEnumerator2 = bestScoreHash2.GetEnumerator();
      while (hashEnumerator2.MoveNext())
      {
          string curKey = hashEnumerator2.Current.Key;
          double curValue = hashEnumerator2.Current.Value;
      } //Hash iteration.



//C# part, end




==================================================================

Marker: BBBBBBBBBBBBBBBB

Traces.

*1. Events, MSQuant's peptide filter dialog

     Public Event pepFilterDismissed( _
     ByVal aSender As Object, _
     ByVal anEvent As pepFilterEventArgs)

     RaiseEvent pepFilterDismissed( _
     aSender, New pepFilterEventArgs(newValues))

     Client side:

       Private Sub mFilterForm_dialogDismissed2( _
       ByVal aSender As Object, _
       ByVal anEvent As pepFilterEventArgs) _
       Handles mFilterForm.pepFilterDismissed

        mPeptideFilter = anEvent.getFilter()
        updatePeptideFilterSummary2(mPeptideFilter)
    End Sub 'mFilterForm_dialogDismissed2


5a. 

   1. Where to store files (not in application folder!)   
        
        Google: s where to store files windows forms
        
          Answer:
            http://stackoverflow.com/questions/396229/wpf-c-where-should-i-be-saving-user-preferences-files
            Environment.GetFolderPath(Environment.SpecialFolder.ApplicationCommonData) + 
            "\\MyCompanyName\\MyApplicationName"
            
            Environment.SpecialFolder.CommonApplicationData
            
            Application.UserAppDataPath
            
          http://stackoverflow.com/questions/147533/best-place-to-save-user-information-for-windows-xp-and-vista-applications/207630#207630
            System.Environment.GetFolderPath( System.Environment.SpecialFolder.ApplicationData)
              "C:\\Documents and Settings\\Administrator\\Application Data"

            or 

            Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);

              System.Environment.SpecialFolder.LocalApplicationData:
                "C:\\Documents and Settings\\Administrator\\Local Settings\\Application Data"


		localAppDataFolder	"C:\\Documents and Settings\\Administrator\\Local Settings\\Application Data"	string
		appDataFolder	"C:\\Documents and Settings\\Administrator\\Application Data"	string

            
          http://msdn.microsoft.com/en-us/library/system.environment.specialfolder.aspx
            Environment.SpecialFolder Enumeration

            ApplicationData: "The directory that serves as a 
              common repository for application-specific 
              data for the current roaming user. A roaming 
              user's profile is kept on a server on the 
              network and is loaded onto a system when the 
              user logs on."

            CommonApplicationData: "The directory that serves as 
              a common repository for application-specific data 
              that is used by all users."

            LocalApplicationData: "The directory that serves as 
              a common repository for application-specific data 
              that is used by the current, non-roaming user."

          http://stackoverflow.com/questions/2614508/best-directory-to-store-application-data-with-read-write-rights-for-all-users
          Best directory to store application data with read\write rights for all users?
          
            But no real answer...
            
          http://stackoverflow.com/questions/2172227/where-to-store-configuration-for-a-simple-net-application
          Where to store configuration for a simple .NET application?
          
          <http://stackoverflow.com/questions/2862218/in-a-given-c-windows-forms-application-wpf-where-are-user-settings-usually-stor>
          In a given C# Windows Forms application/WPF, where are user 
          settings usually stored?
          
          <http://stackoverflow.com/questions/453161/best-practice-to-save-application-settings-in-a-windows-application>
          Best practice to save application settings in a Windows application
          
          <http://stackoverflow.com/questions/2799207/data-storage-access-for-a-c-windows-forms-application/2799240#2799240>
          Data storage/access for a C# Windows Forms application
          
          <http://stackoverflow.com/questions/2709006/ways-to-store-data-in-net>
          Excellent answer by Aaronaught.
          
          <http://stackoverflow.com/questions/1941928/best-way-to-store-data-locally-in-net-c>
          Best way to store data locally in .NET (C#)

          isolated storage: <http://msdn.microsoft.com/en-us/library/3ak841sy%28VS.80%29.aspx>	
            Visual Studio 2005.
            Outdated, not updated since Windows XP.
            
            Updated to Windows Vista: <http://msdn.microsoft.com/en-us/library/3ak841sy.aspx>
            

   
   2. Menu item in application
   
   3.






